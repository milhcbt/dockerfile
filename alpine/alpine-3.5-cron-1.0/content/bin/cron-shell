#!/bin/bash
# --------------------------------------------
# Cron Daemon (Shell) an Alternative Cron
# Email: dimas.restu@student.upi.edu
# --------------------------------------------


# Cron Daemon Parameter Variable
CRON_SCHEDULE=${1}
CRON_COMMAND=${2}
CRON_DEBUG=${3:-false}
CRON_PID=$$


# Cron Daemon Time Variable
CRON_TIME_FIRST=""
CRON_TIME_LOOP=""


# Cron Deamon Valid Function
function cron_valid() {
  # $1 : First Start Cron Time  
  # $2 : Current Cron Loop Time
  # $3 : Cron Schedule Value
  # $4 : Current Loop Value (Optional)

  if [[ ! -z $1 && ! -z $2 && ! -z $3 ]]; then
    local PARAM_01=${1#0}
    local PARAM_02=${2#0}
    local PARAM_03

    # Convert $3 Back to The Original Value If It Has Special Meaning in Bash
    if [[ $3 == "STAR" ]]; then
      PARAM_03="*"
    elif [[ $3 == "ZERO" ]]; then
      PARAM_03=0
    else
      PARAM_03=${3#0}
    fi

    # Print Parameter Value in Debug Mode
    if [[ $CRON_DEBUG == "true" ]]; then
      echo "$PARAM_01 $PARAM_02 $PARAM_03"
    fi

    if [[ ! $PARAM_03 =~ ^\*$ ]]; then
      # Every ...
      if [[ $PARAM_03 =~ ^\*\/[0-9]{1,2}$ ]]; then
        NUMBER=$(echo "$PARAM_03" | cut -d"/" -f2)
        
        CALCULATE=$(($PARAM_02 - $PARAM_01))
        CALCULATE=$((${CALCULATE#-} % $NUMBER))

        if [[ $CALCULATE -eq 0 ]]; then
          return 0
        fi
      # At ...
      elif [[ $PARAM_03 =~ ^[0-9]{1,2}$ ]]; then
        NUMBER=$PARAM_03

        if [[ $PARAM_02 -eq $NUMBER ]]; then
          return 0
        fi
      # .. And ...
      elif [[ $PARAM_03 =~ ^[0-9]{1,2}\,[0-9]{1,2}$ ]]; then
        NUMBER_RANGE[0]=$(echo "$PARAM_03" | cut -d"," -f1)
        NUMBER_RANGE[1]=$(echo "$PARAM_03" | cut -d"," -f2)

        if [[ $PARAM_02 -eq ${NUMBER_RANGE[0]} || $PARAM_02 -eq ${NUMBER_RANGE[1]} ]]; then
          return 0
        fi
      # Between ... And ...
      elif [[ $PARAM_03 =~ ^[0-9]{1,2}\-[0-9]{1,2}$ ]]; then
        NUMBER_RANGE[0]=$(echo "$PARAM_03" | cut -d"-" -f1)
        NUMBER_RANGE[1]=$(echo "$PARAM_03" | cut -d"-" -f2)

        if [[ $PARAM_02 -ge ${NUMBER_RANGE[0]} && $PARAM_02 -le ${NUMBER_RANGE[1]} ]]; then
          return 0
        fi
      # Every ... Between ... And ...
      elif [[ $PARAM_03 =~ ^[0-9]{1,2}\-[0-9]{1,2}\/[0-9]{1,2}$ ]]; then
        NUMBER=$(echo "$PARAM_03" | cut -d"/" -f2)
        NUMBER_RANGE[0]=$(echo "$PARAM_03" | cut -d"/" -f1 | cut -d"-" -f1)
        NUMBER_RANGE[1]=$(echo "$PARAM_03" | cut -d"/" -f1 | cut -d"-" -f2)
        
        if [[ $PARAM_02 -ge ${NUMBER_RANGE[0]} && $PARAM_02 -le ${NUMBER_RANGE[1]} ]]; then
          CALCULATE=$(($PARAM_02 - ${NUMBER_RANGE[0]}))
          CALCULATE=$((${CALCULATE#-} % $NUMBER))

          if [[ $CALCULATE -eq 0 ]]; then
            return 0
          fi
        fi
      fi
    else
      # Every ... (STAR)
      return 0
    fi
  fi

  return 1
}


# Cron Deamon Function
function cron_daemon() {
  # Local Temp Variable
  local CRON_RETVAL=0
  local CRON_COMBINED_RETVAL=()

  # Set Cron Loop Time
  CRON_TIME_LOOP=$(date +"%M %H %d %m %u")

  # Split Cron Variable to Array Variable
  IFS=" " read -r -a CRON_TIME_FIRST_SPLIT <<< $CRON_TIME_FIRST
  IFS=" " read -r -a CRON_TIME_LOOP_SPLIT <<< $CRON_TIME_LOOP
  IFS=" " read -r -a CRON_SCHEDULE_SPLIT <<< $CRON_SCHEDULE

  # Validate Cron Schedule
  if [[ ${#CRON_TIME_FIRST_SPLIT[@]} -eq 5 && ${#CRON_TIME_LOOP_SPLIT[@]} -eq 5 && ${#CRON_SCHEDULE_SPLIT[@]} -eq 5 ]]; then
    # Send Spitted Value to Validation Function
    if [[ $CRON_DEBUG == "true" ]]; then
      echo "[$(date)] PID $CRON_PID Cron Daemon Function: ========== DEBUG: CRON VALID PARAMETER =========="
    fi
    local I=0
    for CRON_VALUE in "${CRON_SCHEDULE_SPLIT[@]}"
    do
      # Since * or 0 Has Other Meaning in Bash, So Replace it If The Cron Value is * or 0 to STAR or ZERO 
      if [[ ${CRON_VALUE} == "*" ]]; then
        CRON_VALUE="STAR"
      elif [[ ${CRON_VALUE} == "0" ]]; then
        CRON_VALUE="ZERO"
      fi

      # Get The Exit Code of Cron Daemon Valid Function
      cron_valid ${CRON_TIME_FIRST_SPLIT[$I]} ${CRON_TIME_LOOP_SPLIT[$I]} ${CRON_VALUE}        
      CRON_COMBINED_RETVAL[$I]=$?

      # Increase Loop I Counter
      I=$(($I + 1))
    done
    if [[ $CRON_DEBUG == "true" ]]; then
      echo "[$(date)] PID $CRON_PID Cron Daemon Function: ================================================="
    fi

    # Get Final Return Value Using Logic Comparasion to All Combined Return Value
    if [[ $CRON_DEBUG == "true" ]]; then
      echo "[$(date)] PID $CRON_PID Cron Daemon Function: =========== DEBUG: CRON RETURN VALUE ============"
    fi    
    for CRON_VALUE in "${CRON_COMBINED_RETVAL[@]}"
    do
      if [[ $CRON_DEBUG == "true" ]]; then
        echo "$CRON_RETVAL AND $CRON_VALUE"
      fi

      if [[ $CRON_RETVAL -eq 0 && $CRON_VALUE -eq 0 ]]; then
        # Make it Always Optimistic to Execute Cron Commnad
        CRON_RETVAL=0
      else
        # Make it Always 1 If One of Combined Return Value is 1
        CRON_RETVAL=1
      fi
    done
    if [[ $CRON_DEBUG == "true" ]]; then
      echo "[$(date)] PID $CRON_PID Cron Daemon Function: ================================================="
    fi

    return $CRON_RETVAL
  else
    echo "[$(date)] PID $CRON_PID Cron Daemon Function: Cron Deamon Failed to initialize"
    echo "[$(date)] PID $CRON_PID Cron Daemon Function: CRON_TIME_FIRST_SPLIT or CRON_TIME_LOOP_SPLIT or CRON_SCHEDULE_SPLIT have a wrong value!"
  fi

  return 2
}


# Cron Deamon Main Function
function cron_main() {
  # Local Temp Variable
  local CRON_TIME_SLEEP=0
  local CRON_TIME_DIFF=0

  # Set Cron First Time
  CRON_TIME_FIRST=$(date +"%M %H %d %m %u")

  echo "[$(date)] PID $CRON_PID Main: Cron Daemon Started"
  echo "[$(date)] PID $CRON_PID Main: Cron Daemon Routine Check Set to Every Minute"  
  if [[ ! -z $CRON_SCHEDULE && ! -z $CRON_COMMAND ]]; then
    while true
    do
      CRON_TIME_DIFF=$(date +"%S")
      CRON_TIME_DIFF=${CRON_TIME_DIFF#0}
      
      # Calculating Dynamic Wait Time so It'll be Always in 00 Seconds
      if [[ $CRON_TIME_DIFF -ne 0 ]]; then
        CRON_TIME_SLEEP=$((60 - $CRON_TIME_DIFF))
      else
        CRON_TIME_SLEEP=60
      fi

      sleep $CRON_TIME_SLEEP
      cron_daemon
      
      # Execute Cron Command If Return Value is 0
      if [[ $? -eq 0 ]]; then
        echo "[$(date)] PID $CRON_PID Main: Execute Cron Command: $CRON_COMMAND"

        sh -c $CRON_COMMAND > /dev/null
        if [ $? -eq 0 ]; then
          echo "[$(date)] PID $CRON_PID Main: Cron Command Terminated Successfully"
        else
          echo "[$(date)] PID $CRON_PID Main: Cron Command Terminated Improperly"
        fi
      # Break the Loop If Return Value is 2
      # That's Mean Something Wrong in The Cron Daemon Function
      elif [[ $? -eq 2 ]]; then
        break
      fi
    done
  else
    echo "[$(date)] PID $CRON_PID Main: Failed to Execute Cron Command"
    echo "[$(date)] PID $CRON_PID Main: CRON_SCHEDULE and CRON_COMMAND paramater required!"
  fi
  echo "[$(date)] PID $CRON_PID Main: Cron Daemon Finished"
}

cron_main
exit 0
