#!/bin/sh -e


# Add Custom UserID as "User" User
if [ "$(id -u)" != "0" ]; then
  sed "s/^user:\(.*\):[0-9]\+:\([0-9]\+\):.*:\(.*:.*\)/user:\1:$(id -u):\2:User:\3/g" < /etc/passwd > /tmp/passwd \
  && cat /tmp/passwd > /etc/passwd \
  && rm -f /tmp/passwd
fi


# Prepare var/lib directory due to volume
if [ ! -d /var/lib ]; then
  mkdir -p /var/lib \
  && chown user:root /var/lib \
  && chmod 775 /var/lib
fi


# Prepare var/lib/redis directory due to volume
if [ ! -d /var/lib/redis ]; then
  mkdir -p /var/lib/redis \
  && chown user:root /var/lib/redis \
  && chmod 775 /var/lib/redis
fi


# Prepare var/lib/redis/data directory due to volume
if [ ! -d /var/lib/redis/data ]; then
  mkdir -p /var/lib/redis/data \
  && chown user:root /var/lib/redis/data \
  && chmod 775 /var/lib/redis/data
fi


# Prepare Redis configuration
IS_NUMBER='^[0-9]+$'
IS_PASSWORD='^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$'
# ------------------------------------------------
# Redis Password variable configuration
REDIS_PASSWORD=${REDIS_PASSWORD:-}
# ------------------------------------------------
# Redis Replication variable configuration
REDIS_REPLICATION=${REDIS_REPLICATION:-}
REDIS_MASTER_HOST=${REDIS_MASTER_HOST:-}
REDIS_MASTER_PORT=${REDIS_MASTER_PORT:-6379}
REDIS_MASTER_QUORUM=${REDIS_MASTER_QUORUM:-}
REDIS_SLAVE_HOST=${REDIS_SLAVE_HOST:-}
REDIS_SLAVE_PORT=${REDIS_SLAVE_PORT:-6379}
REDIS_SLAVE_QUORUM=${REDIS_SLAVE_QUORUM:-}
# ------------------------------------------------
# Redis Arguments variable configuration
ARGS=${ARGS:-}
ARGS_EXTRA=" --daemonize no \
             --bind 0.0.0.0 \
             --port 6379 \
             --dir /var/lib/redis/data \
             --appendonly yes \
             --appendfilename dump.aof"
ARGS_REPLC=" "
# ------------------------------------------------
# Validate Redis credentials variable configuration
if ! [[ -z $REDIS_PASSWORD ]]; then
  if ! [[ $REDIS_PASSWORD =~ $IS_PASSWORD ]]; then
    echo "Failed to configure REDIS_PASSWORD variable. Redis will using no authentication password"
  else
    ARGS_EXTRA="${ARGS_EXTRA} \
                --requirepass ${REDIS_PASSWORD}"
  fi
else
  echo "Redis will using no authentication password"
fi
# ------------------------------------------------
# Vaildate Redis replication variable configuration
if ! [[ -z $REDIS_REPLICATION ]]; then
  if [[ $REDIS_REPLICATION == "master" ]]; then
    ARGS_REPLC="${ARGS_REPLC} \
                --masterauth ${REDIS_PASSWORD}"
  elif [[ $REDIS_REPLICATION == "slave" ]]; then
    if ! [[ -z $REDIS_MASTER_HOST ]]; then
      if ! [[ -z $REDIS_MASTER_PORT ]]; then
        if [[ $REDIS_MASTER_PORT=~$IS_NUMBER ]]; then
          ARGS_REPLC="${ARGS_REPLC} \
                      --masterauth ${REDIS_PASSWORD}
                      --slaveof ${REDIS_MASTER_HOST} ${REDIS_MASTER_PORT}"
        else
          echo "Redis Replication configuration failed. REDIS_MASTER_PORT must in numeric format!"
        fi
      else
        echo "Redis Replication configuration failed. REDIS_MASTER_PORT must be filled!"        
      fi
    else
      echo "Redis Replication configuration failed. REDIS_MASTER_HOST must be filled!"
    fi
  elif [[ $REDIS_REPLICATION == "sentinel" ]]; then
    if [[ ! -z $REDIS_MASTER_HOST && ! -z $REDIS_SLAVE_HOST ]]; then
      if [[ ! -z $REDIS_MASTER_PORT && ! -z $REDIS_SLAVE_PORT ]]; then
        if [[ $REDIS_MASTER_PORT=~$IS_NUMBER && $REDIS_SLAVE_PORT=~$IS_NUMBER ]]; then
          rm -f /data/redis/sentinel.conf
          REDIS_SENTINEL_IP=$(iproute | grep default | awk -F' ' '{print $3}')
          { \
            echo "port 6379"; \
            echo "dir /data/redis"; \
            echo "";
            echo "sentinel announce-ip ${REDIS_SENTINEL_IP}"; \
            echo "sentinel announce-port 6379"; \
            echo ""; \
            echo "sentinel monitor master ${REDIS_MASTER_HOST} ${REDIS_MASTER_PORT} ${REDIS_MASTER_QUORUM}"; \
            echo "sentinel down-after-milliseconds master 10000"; \
            echo "sentinel failover-timeout master 30000"; \
            echo "sentinel parallel-syncs master 1"; \
            echo ""; \
            echo "sentinel monitor master ${REDIS_SLAVE_HOST} ${REDIS_SLAVE_PORT} ${REDIS_SLAVE_QUORUM}"; \
            echo "sentinel down-after-milliseconds master 10000"; \
            echo "sentinel failover-timeout master 30000"; \
            echo "sentinel parallel-syncs master 1"; \      
          } > /data/redis/sentinel.conf
          ARGS_REPLC="${ARGS_REPLC} \
                      /data/redis/sentinel.conf \
                      --sentinel"
        else
          echo "Redis Replication configuration failed. REDIS_MASTER_PORT & REDIS_SLAVE_PORT must in numeric format!"
        fi
      else
        echo "Redis Replication configuration failed. REDIS_MASTER_PORT & REDIS_SLAVE_PORT must be filled!"        
      fi
    else
      echo "Redis Replication configuration failed. REDIS_MASTER_HOST & REDIS_SLAVE_HOST must be filled!"
    fi
  else
    echo "Redis Replication configuration failed. REDIS_REPLICATION must be filled with master or slave or sentinel!"  
  fi
fi
# ------------------------------------------------
# Export Redis parameters
if ! [[ -z $REDIS_REPLICATION ]]; then
  if [[ $REDIS_REPLICATION == "sentinel" ]]; then
    ARGS=${ARGS_REPLC}
  else
    ARGS=${ARGS}${ARGS_EXTRA}${ARGS_REPLC}
  fi
else
  ARGS=${ARGS}${ARGS_EXTRA}
fi
export ARGS=$ARGS
# ------------------------------------------------
# Wait for Redis Master to be ready
if ! [[ -z $REDIS_REPLICATION ]]; then
  if [[ $REDIS_REPLICATION == "slave" ]]; then
    if ! [[ -z $REDIS_MASTER_HOST ]]; then
      if ! [[ -z $REDIS_MASTER_PORT ]]; then
        if [[ $REDIS_MASTER_PORT=~$IS_NUMBER ]]; then
          while [[ $(nc -vz ${REDIS_MASTER_HOST} ${REDIS_MASTER_PORT} 2>&1 | wc -l) -eq 0 ]]
          do
            echo "Waiting for Redis Master: ${REDIS_MASTER_HOST}:${REDIS_MASTER_PORT}"
            sleep 2
          done
        fi
      fi
    fi
  fi
fi
# ------------------------------------------------
# Cleaning-up configuration variable
unset REDIS_PASSWORD
unset REDIS_REPLICATION REDIS_MASTER_HOST REDIS_MASTER_PORT REDIS_MASTER_QUORUM \
      REDIS_SLAVE_HOST REDIS_SLAVE_PORT REDIS_SLAVE_QUORUM


# Execute Everything from Entries
exec "$@"
